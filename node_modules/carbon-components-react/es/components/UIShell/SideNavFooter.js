import cx from 'classnames';
import React from 'react';
import PropTypes from 'prop-types'; // TODO: replace with @carbon/icons-react

var Close = function Close() {
  return React.createElement("svg", {
    "aria-hidden": "true",
    width: "20",
    height: "20",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 32 32"
  }, React.createElement("path", {
    d: "M17.414 16L24 9.414 22.586 8 16 14.586 9.414 8 8 9.414 14.586 16 8 22.586 9.414 24 16 17.414 22.586 24 24 22.586 17.414 16z"
  }));
}; // TODO: replace with @carbon/icons-react


var ChevronRight = function ChevronRight() {
  return React.createElement("svg", {
    "aria-hidden": "true",
    width: "20",
    height: "20",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 32 32"
  }, React.createElement("path", {
    d: "M22 16L12 26l-1.414-1.414L19.172 16l-8.586-8.586L12 6l10 10z"
  }));
};
/**
 * SideNavFooter is used for rendering the button at the bottom of the side
 * navigation that is a part of the UI Shell. It is responsible for handling the
 * user interaction to expand or collapse the side navigation.
 */


var SideNavFooter = function SideNavFooter(_ref) {
  var assistiveText = _ref.assistiveText,
      customClassName = _ref.className,
      isExpanded = _ref.isExpanded,
      onToggle = _ref.onToggle;
  var className = cx('bx--side-nav__footer', customClassName);
  return React.createElement("footer", {
    className: className
  }, React.createElement("button", {
    className: "bx--side-nav__toggle",
    type: "button",
    onClick: onToggle,
    title: assistiveText
  }, React.createElement("div", {
    className: "bx--side-nav__icon"
  }, isExpanded ? React.createElement(Close, null) : React.createElement(ChevronRight, null)), React.createElement("span", {
    className: "bx--assistive-text"
  }, assistiveText)));
};

SideNavFooter.propTypes = {
  /**
   * Provide text to be read to screen readers and shown as a tooltip when
   * interacting with the toggle button in the footer
   */
  assistiveText: PropTypes.string.isRequired,

  /**
   * Specify whether the side navigation is expanded or collapsed
   */
  isExpanded: PropTypes.bool.isRequired,

  /**
   * Provide a function that is called when the toggle button is interacted
   * with. Useful for controlling the expansion state of the side navigation.
   */
  onToggle: PropTypes.func.isRequired
};
SideNavFooter.defaultProps = {
  assistiveText: 'Toggle opening or closing the side navigation'
};
export default SideNavFooter;