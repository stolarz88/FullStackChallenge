"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: sync with @carbon/icons-react
var ChevronDown = function ChevronDown() {
  return _react.default.createElement("svg", {
    "aria-hidden": "true",
    width: "20",
    height: "20",
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 32 32"
  }, _react.default.createElement("path", {
    d: "M16 22L6 12l1.414-1.414L16 19.172l8.586-8.586L26 12 16 22z"
  }));
};

var SideNavSwitcher = _react.default.forwardRef(function (props, ref) {
  var customClassName = props.className,
      labelText = props.labelText,
      onChange = props.onChange,
      options = props.options;
  var className = (0, _classnames.default)('bx--side-nav__switcher', customClassName); // Note for usage around `onBlur`: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-onchange.md

  return _react.default.createElement("div", {
    className: className
  }, _react.default.createElement("label", {
    htmlFor: "side-nav-switcher",
    className: "bx--assistive-text"
  }, labelText), _react.default.createElement("select", {
    id: "carbon-side-nav-switcher",
    className: "bx--side-nav__select",
    defaultValue: "",
    onBlur: onChange,
    onChange: onChange,
    ref: ref
  }, _react.default.createElement("option", {
    className: "bx--side-nav__option",
    disabled: true,
    hidden: true,
    value: ""
  }, labelText), options.map(function (option) {
    return _react.default.createElement("option", {
      key: option,
      className: "bx--side-nav__option",
      value: option
    }, option);
  })), _react.default.createElement("div", {
    className: "bx--side-nav__switcher-chevron"
  }, _react.default.createElement(ChevronDown, null)));
});

SideNavSwitcher.propTypes = {
  /**
   * Provide an optional class to be applied to the containing node
   */
  className: _propTypes.default.string,

  /**
   * Provide the label for the switcher. This will be the firt visible option
   * when someone views this control
   */
  labelText: _propTypes.default.string.isRequired,

  /**
   * Provide a callback function that is called whenever the switcher value is
   * updated
   */
  onChange: _propTypes.default.func,

  /**
   * Provide an array of options to be rendered in the switcher as an
   * `<option>`. The text value will be what is displayed to the user and is set
   * as the `value` prop for each `<option>`.
   */
  options: _propTypes.default.arrayOf(_propTypes.default.string).isRequired
};
var _default = SideNavSwitcher;
exports.default = _default;