'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _Object$assign = _interopDefault(require('babel-runtime/core-js/object/assign'));
var _Promise = _interopDefault(require('babel-runtime/core-js/promise'));

// boilerplate helper method code inspired by axios/lib/core/Axios.js ;)
var datalessMethods = ['delete', 'get', 'head', 'options'];

var dataMethods = ['post', 'put', 'patch'];

function extendPrototype(cachiosPrototype) {
  datalessMethods.forEach(function (method) {
    cachiosPrototype[method] = function aliasDatalessMethod(url, config) {
      var baseRequest = {
        url: url,
        method: method
      };

      var mergedRequest = _Object$assign(config || {}, baseRequest);

      return this.request(mergedRequest);
    };
  });

  dataMethods.forEach(function (method) {
    cachiosPrototype[method] = function aliasDataMethod(url, data, config) {
      var baseRequest = {
        url: url,
        method: method,
        data: data
      };

      var mergedRequest = _Object$assign(config || {}, baseRequest);

      return this.request(mergedRequest);
    };
  });
}

var hash = require('object-hash');
var NodeCache = require('node-cache');

function defaultCacheIdentifer(config) {
  return {
    method: config.method,
    url: config.url,
    params: config.params,
    data: config.data
  };
}

function defaultResponseCopier(response) {
  return {
    status: response.status,
    data: response.data
  };
}

function Cachios(axiosInstance, nodeCacheConf) {
  this.axiosInstance = axiosInstance;
  this.cache = new NodeCache(nodeCacheConf || {
    stdTTL: 30,
    checkperiod: 120
  });

  this.getCacheIdentifier = defaultCacheIdentifer;
  this.getResponseCopy = defaultResponseCopier;
}

Cachios.prototype.getCacheKey = function getCacheKey(config) {
  return hash(this.getCacheIdentifier(config));
};

Cachios.prototype.getCachedValue = function getCachedValue(cacheKey) {
  return this.cache.get(cacheKey);
};

Cachios.prototype.setCachedValue = function setCachedValue(cacheKey, value, ttl) {
  return this.cache.set(cacheKey, value, ttl);
};

Cachios.prototype.request = function request(config) {
  var _this = this;

  var ttl = config.ttl;


  var cacheKey = this.getCacheKey(config);
  var cachedValue = this.getCachedValue(cacheKey);

  var promise = void 0;

  if (cachedValue === undefined) {
    promise = this.axiosInstance.request(config).then(function (resp) {
      _this.setCachedValue(cacheKey, _this.getResponseCopy(resp), ttl);
      return resp;
    });
  } else {
    promise = _Promise.resolve(cachedValue);
  }

  return promise;
};

extendPrototype(Cachios.prototype);

var axios = require('axios');

var instance = new Cachios(axios);

// allow for similar axios syntax
instance.create = function create(axiosInstance, nodeCacheConf) {
  return new Cachios(axiosInstance, nodeCacheConf);
};

module.exports = instance;
//# sourceMappingURL=index.js.map
